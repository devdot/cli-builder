<?php

namespace Devdot\Cli\Builder;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\ParameterNotFoundException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;
use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class ProductionContainer extends \Devdot\Cli\Container\CachedContainer
{
    protected $parameters = [];

    public function __construct()
    {
        $this->parameters = $this->getDefaultParameters();

        $this->services = $this->privates = [];
        $this->methodMap = [
            'Devdot\\Cli\\Builder\\Commands\\Build\\Phar' => 'getPharService',
            'Devdot\\Cli\\Builder\\Commands\\Build\\Readme' => 'getReadmeService',
            'Devdot\\Cli\\Builder\\Commands\\Composer\\AddBinary' => 'getAddBinaryService',
            'Devdot\\Cli\\Builder\\Commands\\Init' => 'getInitService',
            'Devdot\\Cli\\Builder\\Commands\\Make\\BaseCommand' => 'getBaseCommandService',
            'Devdot\\Cli\\Builder\\Commands\\Make\\Command' => 'getCommandService',
            'Devdot\\Cli\\Builder\\Commands\\Make\\Kernel' => 'getKernelService',
            'Devdot\\Cli\\Builder\\Commands\\Make\\Provider' => 'getProviderService',
            'Devdot\\Cli\\Builder\\Commands\\Project' => 'getProjectService',
            'Devdot\\Cli\\Builder\\Commands\\Run\\Build' => 'getBuildService',
            'Devdot\\Cli\\Builder\\Commands\\Run\\Dev' => 'getDevService',
            'Devdot\\Cli\\Builder\\Commands\\Run\\Prod' => 'getProdService',
            'application' => 'getApplicationService',
        ];
        $this->aliases = [
            'Devdot\\Cli\\Application' => 'application',
            'Devdot\\Cli\\Builder\\Kernel' => 'kernel',
            'Devdot\\Cli\\Contracts\\ContainerInterface' => 'service_container',
            'Devdot\\Cli\\Kernel' => 'kernel',
            'Psr\\Container\\ContainerInterface' => 'service_container',
        ];
    }

    public function compile(): void
    {
        throw new LogicException('You cannot compile a dumped container that was already compiled.');
    }

    public function isCompiled(): bool
    {
        return true;
    }

    public function getRemovedIds(): array
    {
        return [
            'Devdot\\Cli\\Builder\\Generator\\Printer' => true,
            'Devdot\\Cli\\Builder\\Project\\Project' => true,
            'Symfony\\Component\\Console\\CommandLoader\\CommandLoaderInterface' => true,
        ];
    }

    /**
     * Gets the public 'Devdot\Cli\Builder\Commands\Build\Phar' shared autowired service.
     *
     * @return \Devdot\Cli\Builder\Commands\Build\Phar
     */
    protected static function getPharService($container)
    {
        $container->services['Devdot\\Cli\\Builder\\Commands\\Build\\Phar'] = $instance = new \Devdot\Cli\Builder\Commands\Build\Phar(($container->privates['Devdot\\Cli\\Builder\\Project\\Project'] ?? self::getProject2Service($container)));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Devdot\Cli\Builder\Commands\Build\Readme' shared autowired service.
     *
     * @return \Devdot\Cli\Builder\Commands\Build\Readme
     */
    protected static function getReadmeService($container)
    {
        $container->services['Devdot\\Cli\\Builder\\Commands\\Build\\Readme'] = $instance = new \Devdot\Cli\Builder\Commands\Build\Readme(($container->privates['Devdot\\Cli\\Builder\\Project\\Project'] ?? self::getProject2Service($container)));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Devdot\Cli\Builder\Commands\Composer\AddBinary' shared autowired service.
     *
     * @return \Devdot\Cli\Builder\Commands\Composer\AddBinary
     */
    protected static function getAddBinaryService($container)
    {
        $container->services['Devdot\\Cli\\Builder\\Commands\\Composer\\AddBinary'] = $instance = new \Devdot\Cli\Builder\Commands\Composer\AddBinary(($container->privates['Devdot\\Cli\\Builder\\Project\\Project'] ?? self::getProject2Service($container)));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Devdot\Cli\Builder\Commands\Init' shared autowired service.
     *
     * @return \Devdot\Cli\Builder\Commands\Init
     */
    protected static function getInitService($container)
    {
        $container->services['Devdot\\Cli\\Builder\\Commands\\Init'] = $instance = new \Devdot\Cli\Builder\Commands\Init(($container->privates['Devdot\\Cli\\Builder\\Project\\Project'] ?? self::getProject2Service($container)));

        $instance->setContainer($container);
        $instance->__constructForceTrait();

        return $instance;
    }

    /**
     * Gets the public 'Devdot\Cli\Builder\Commands\Make\BaseCommand' shared autowired service.
     *
     * @return \Devdot\Cli\Builder\Commands\Make\BaseCommand
     */
    protected static function getBaseCommandService($container)
    {
        $container->services['Devdot\\Cli\\Builder\\Commands\\Make\\BaseCommand'] = $instance = new \Devdot\Cli\Builder\Commands\Make\BaseCommand(($container->privates['Devdot\\Cli\\Builder\\Project\\Project'] ?? self::getProject2Service($container)), ($container->privates['Devdot\\Cli\\Builder\\Generator\\Printer'] ??= new \Devdot\Cli\Builder\Generator\Printer()));

        $instance->setContainer($container);
        $instance->__constructForceTrait();
        $instance->__constructNameTrait();

        return $instance;
    }

    /**
     * Gets the public 'Devdot\Cli\Builder\Commands\Make\Command' shared autowired service.
     *
     * @return \Devdot\Cli\Builder\Commands\Make\Command
     */
    protected static function getCommandService($container)
    {
        $container->services['Devdot\\Cli\\Builder\\Commands\\Make\\Command'] = $instance = new \Devdot\Cli\Builder\Commands\Make\Command(($container->privates['Devdot\\Cli\\Builder\\Project\\Project'] ?? self::getProject2Service($container)), ($container->privates['Devdot\\Cli\\Builder\\Generator\\Printer'] ??= new \Devdot\Cli\Builder\Generator\Printer()));

        $instance->setContainer($container);
        $instance->__constructForceTrait();
        $instance->__constructNameTrait();

        return $instance;
    }

    /**
     * Gets the public 'Devdot\Cli\Builder\Commands\Make\Kernel' shared autowired service.
     *
     * @return \Devdot\Cli\Builder\Commands\Make\Kernel
     */
    protected static function getKernelService($container)
    {
        $container->services['Devdot\\Cli\\Builder\\Commands\\Make\\Kernel'] = $instance = new \Devdot\Cli\Builder\Commands\Make\Kernel(($container->privates['Devdot\\Cli\\Builder\\Project\\Project'] ?? self::getProject2Service($container)), ($container->privates['Devdot\\Cli\\Builder\\Generator\\Printer'] ??= new \Devdot\Cli\Builder\Generator\Printer()));

        $instance->setContainer($container);
        $instance->__constructForceTrait();

        return $instance;
    }

    /**
     * Gets the public 'Devdot\Cli\Builder\Commands\Make\Provider' shared autowired service.
     *
     * @return \Devdot\Cli\Builder\Commands\Make\Provider
     */
    protected static function getProviderService($container)
    {
        $container->services['Devdot\\Cli\\Builder\\Commands\\Make\\Provider'] = $instance = new \Devdot\Cli\Builder\Commands\Make\Provider(($container->privates['Devdot\\Cli\\Builder\\Project\\Project'] ?? self::getProject2Service($container)), ($container->privates['Devdot\\Cli\\Builder\\Generator\\Printer'] ??= new \Devdot\Cli\Builder\Generator\Printer()));

        $instance->setContainer($container);
        $instance->__constructForceTrait();
        $instance->__constructNameTrait();

        return $instance;
    }

    /**
     * Gets the public 'Devdot\Cli\Builder\Commands\Project' shared autowired service.
     *
     * @return \Devdot\Cli\Builder\Commands\Project
     */
    protected static function getProjectService($container)
    {
        $container->services['Devdot\\Cli\\Builder\\Commands\\Project'] = $instance = new \Devdot\Cli\Builder\Commands\Project(($container->privates['Devdot\\Cli\\Builder\\Project\\Project'] ?? self::getProject2Service($container)));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Devdot\Cli\Builder\Commands\Run\Build' shared autowired service.
     *
     * @return \Devdot\Cli\Builder\Commands\Run\Build
     */
    protected static function getBuildService($container)
    {
        $container->services['Devdot\\Cli\\Builder\\Commands\\Run\\Build'] = $instance = new \Devdot\Cli\Builder\Commands\Run\Build(($container->privates['Devdot\\Cli\\Builder\\Project\\Project'] ?? self::getProject2Service($container)));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Devdot\Cli\Builder\Commands\Run\Dev' shared autowired service.
     *
     * @return \Devdot\Cli\Builder\Commands\Run\Dev
     */
    protected static function getDevService($container)
    {
        $container->services['Devdot\\Cli\\Builder\\Commands\\Run\\Dev'] = $instance = new \Devdot\Cli\Builder\Commands\Run\Dev(($container->privates['Devdot\\Cli\\Builder\\Project\\Project'] ?? self::getProject2Service($container)));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Devdot\Cli\Builder\Commands\Run\Prod' shared autowired service.
     *
     * @return \Devdot\Cli\Builder\Commands\Run\Prod
     */
    protected static function getProdService($container)
    {
        $container->services['Devdot\\Cli\\Builder\\Commands\\Run\\Prod'] = $instance = new \Devdot\Cli\Builder\Commands\Run\Prod(($container->privates['Devdot\\Cli\\Builder\\Project\\Project'] ?? self::getProject2Service($container)));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'application' shared autowired service.
     *
     * @return \Devdot\Cli\Application
     */
    protected static function getApplicationService($container)
    {
        return $container->services['application'] = new \Devdot\Cli\Application('cli-builder', '1.0.1', new \Symfony\Component\Console\CommandLoader\ContainerCommandLoader($container, $container->parameters['commands_as_map']), false);
    }

    /**
     * Gets the private 'Devdot\Cli\Builder\Project\Project' shared autowired service.
     *
     * @return \Devdot\Cli\Builder\Project\Project
     */
    protected static function getProject2Service($container)
    {
        return $container->privates['Devdot\\Cli\\Builder\\Project\\Project'] = \Devdot\Cli\Builder\Project\Project::make();
    }

    public function getParameter(string $name): array|bool|string|int|float|\UnitEnum|null
    {
        if (!(isset($this->parameters[$name]) || isset($this->loadedDynamicParameters[$name]) || \array_key_exists($name, $this->parameters))) {
            throw new ParameterNotFoundException($name);
        }
        if (isset($this->loadedDynamicParameters[$name])) {
            return $this->loadedDynamicParameters[$name] ? $this->dynamicParameters[$name] : $this->getDynamicParameter($name);
        }

        return $this->parameters[$name];
    }

    public function hasParameter(string $name): bool
    {
        return isset($this->parameters[$name]) || isset($this->loadedDynamicParameters[$name]) || \array_key_exists($name, $this->parameters);
    }

    public function setParameter(string $name, $value): void
    {
        throw new LogicException('Impossible to call set() on a frozen ParameterBag.');
    }

    public function getParameterBag(): ParameterBagInterface
    {
        if (!isset($this->parameterBag)) {
            $parameters = $this->parameters;
            foreach ($this->loadedDynamicParameters as $name => $loaded) {
                $parameters[$name] = $loaded ? $this->dynamicParameters[$name] : $this->getDynamicParameter($name);
            }
            $this->parameterBag = new FrozenParameterBag($parameters);
        }

        return $this->parameterBag;
    }

    private $loadedDynamicParameters = [];
    private $dynamicParameters = [];

    private function getDynamicParameter(string $name)
    {
        throw new ParameterNotFoundException($name);
    }

    protected function getDefaultParameters(): array
    {
        return [
            'development' => false,
            'namespace' => 'Devdot\\Cli\\Builder',
            'application_name' => 'cli-builder',
            'application_version' => '1.0.1',
            'commands_as_map' => [
                'build:phar' => 'Devdot\\Cli\\Builder\\Commands\\Build\\Phar',
                'build:readme' => 'Devdot\\Cli\\Builder\\Commands\\Build\\Readme',
                'composer:add-binary' => 'Devdot\\Cli\\Builder\\Commands\\Composer\\AddBinary',
                'init' => 'Devdot\\Cli\\Builder\\Commands\\Init',
                'make:base-command' => 'Devdot\\Cli\\Builder\\Commands\\Make\\BaseCommand',
                'make:command' => 'Devdot\\Cli\\Builder\\Commands\\Make\\Command',
                'make:kernel' => 'Devdot\\Cli\\Builder\\Commands\\Make\\Kernel',
                'make:provider' => 'Devdot\\Cli\\Builder\\Commands\\Make\\Provider',
                'project' => 'Devdot\\Cli\\Builder\\Commands\\Project',
                'run:build' => 'Devdot\\Cli\\Builder\\Commands\\Run\\Build',
                'run:dev' => 'Devdot\\Cli\\Builder\\Commands\\Run\\Dev',
                'run:prod' => 'Devdot\\Cli\\Builder\\Commands\\Run\\Prod',
            ],
        ];
    }
}
